name: ETL

on:
  push:
    branches: [ "main", "pruebas_yaml" ]
  pull_request:
    branches: [ "main" ]

jobs:
  etl-job:
    runs-on: ubuntu-latest
    
    # Servicio PostgreSQL para CI
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: mydb
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U testuser -d mydb"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 10

    env:
      DB_HOST: localhost
      DB_NAME: mydb
      DB_USER: testuser
      DB_PASSW: testpass
      DB_PORT: 5432

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Instalar dependencias
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      
      - name: Verificar conexión a PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U testuser -d mydb; do
            echo "Esperando PostgreSQL..."
            sleep 2
          done
          echo "✓ PostgreSQL listo"
      
      - name: Crear esquema raw en la base de datos
        env:
          PGPASSWORD: testpass
        run: |
          psql -h localhost -p 5432 -U testuser -d mydb -c "CREATE SCHEMA IF NOT EXISTS raw;"
          psql -h localhost -p 5432 -U testuser -d mydb -c "\dn"
      
      - name: Ejecutar pipeline transformación de datos
        run: python scripts/run_all.py

      - name: Ejecutar pipeline carga de datos
        run: python scripts/loadData.py
